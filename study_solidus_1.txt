http://maeharin.hatenablog.com/entry/20130104/p1
http://railsdoc.com/references/config
http://qiita.com/kenzan100/items/73b8571b78d002503d95
http://railsguides.jp/initialization.html
----
cat config/application.rb 
require_relative 'boot'

require 'rails/all'

# Require the gems listed in Gemfile, including any gems
# you've limited to :test, :development, or :production.
Bundler.require(*Rails.groups)

module Myshop
  class Application < Rails::Application
    
    config.to_prepare do
      # Load application's model / class decorators
      Dir.glob(File.join(File.dirname(__FILE__), "../app/**/*_decorator*.rb")) do |c|
        Rails.configuration.cache_classes ? require(c) : load(c)
      end

      # Load application's view overrides
      Dir.glob(File.join(File.dirname(__FILE__), "../app/overrides/*.rb")) do |c|
        Rails.configuration.cache_classes ? require(c) : load(c)
      end
    end

    # Settings in config/environments/* take precedence over those specified here.
    # Application configuration should go into files in config/initializers
    # -- all .rb files in
----
cat config/boot.rb 
ENV['BUNDLE_GEMFILE'] ||= File.expand_path('../Gemfile', __dir__)

require 'bundler/setup' # Set up gems listed in the Gemfile.
----
cat config/initializers/
application_controller_renderer.rb  cookies_serializer.rb               mime_types.rb                       spree.rb                            
assets.rb                           filter_parameter_logging.rb         new_framework_defaults.rb           wrap_parameters.rb                  
backtrace_silencers.rb              inflections.rb                      session_store.rb 
----

######################################################################
cat config/routes.rb
Rails.application.routes.draw do

  # This line mounts Spree's routes at the root of your application.
  # This means, any requests to URLs such as /products, will go to Spree::ProductsController.
  # If you would like to change where this engine is mounted, simply change the :at option to something different.
  #
  # We ask that you don't use the :as option here, as Spree relies on it being the default of "spree"
  mount Spree::Core::Engine, :at => '/'
          # For details on the DSL available within this file, see http://guides.rubyonrails.org/routing.html
end

http://qiita.com/Esfahan/items/7a0e9a3df28d68905a6e
http://blog.onk.ninja/2014/12/02/mountable_engine
http://xxxxxx/ => これで　"Spree::Core::Engine" にアクセスできるようになる

QQQQQQQQQ - どうやって/rails/myshop/vendor/bundler/ruby/2.3.0/gems/solidus_frontend-2.0.0/config/routes.rb　を読み込んでいるか
/rails/myshop/vendor/bundler/ruby/2.3.0/gems　が自動的に読み込まれる?? インストール gem "solidus"で設定されている??

----
** solidus.rbを読み込むこと(require)で、読み込まれる?

cat /rails/myshop/vendor/bundler/ruby/2.3.0/gems/solidus-2.0.0/lib/solidus.rb 
require 'solidus_core'
require 'solidus_api'
require 'solidus_backend'
require 'solidus_frontend'
require 'solidus_sample'

begin
  require 'protected_attributes'
  puts "*" * 75
  puts "[FATAL] Spree does not work with the protected_attributes gem installed!"
  puts "You MUST remove this gem from your Gemfile. It is incompatible with Spree."
  puts "*" * 75
  exit
rescue LoadError
end
----

#############################################################################################
cat /rails/myshop/vendor/bundler/ruby/2.3.0/gems/solidus_frontend-2.0.0/config/routes.rb
Spree::Core::Engine.routes.draw do
  root to: 'home#index'

  resources :products, only: [:index, :show]

  get '/locale/set', to: 'locale#set'

  # non-restful checkout stuff
  patch '/checkout/update/:state', to: 'checkout#update', as: :update_checkout
  get '/checkout/:state', to: 'checkout#edit', as: :checkout_state
  get '/checkout', to: 'checkout#edit', as: :checkout

  get '/orders/populate', to: 'orders#populate_redirect'
  get '/orders/:id/token/:token' => 'orders#show', :as => :token_order

  resources :orders, except: [:index, :new, :create, :destroy] do
    post :populate, on: :collection
  end

  get '/cart', to: 'orders#edit', as: :cart
  patch '/cart', to: 'orders#update', as: :update_cart
  put '/cart/empty', to: 'orders#empty', as: :empty_cart

  # route globbing for pretty nested taxon and product paths
  get '/t/*id', to: 'taxons#show', as: :nested_taxons

  get '/unauthorized', to: 'home#unauthorized', as: :unauthorized
  get '/content/cvv', to: 'content#cvv', as: :cvv
  get '/cart_link', to: 'store#cart_link', as: :cart_link
end
#####################################################################################

root to: 'home#index' について
cat solidus_frontend-2.0.0/app/controllers/spree/home_controller.rb

module Spree
  class HomeController < Spree::StoreController
    helper 'spree/products'
    respond_to :html

    def index
      @searcher = build_searcher(params.merge(include_images: true))
      @products = @searcher.retrieve_products
      @taxonomies = Spree::Taxonomy.includes(root: :children)
    end
  end
end

module "Spred"の定義
HomeControllerはSpree::StoreControllerを継承している

---------
cat views/spree/products/index.html.erb 
<% content_for :sidebar do %>
  <div data-hook="homepage_sidebar_navigation">
    <% if "spree/products" == params[:controller] && @taxon %>
      <%= render :partial => 'spree/shared/filters' %>
    <% else %>
      <%= render :partial => 'spree/shared/taxonomies' %>
    <% end %>
  </div>
<% end %>


<% if params[:keywords] %>

  <div data-hook="search_results">
    <% if @products.empty? %>
      <h6 class="search-results-title"><%= Spree.t(:no_products_found) %></h6>
    <% else %>
      <%= render :partial => 'spree/shared/products', :locals => { :products => @products, :taxon => @taxon } %>
    <% end %>
  </div>

<% else %>

  <div data-hook="homepage_products">
    <%= render :partial => 'spree/shared/products', :locals => { :products => @products, :taxon => @taxon } %>
  </div>
<% end %>
---------
↑を読みこんで 変数は↓を利用している
      @searcher = build_searcher(params.merge(include_images: true))
      @products = @searcher.retrieve_products
      @taxonomies = Spree::Taxonomy.includes(root: :children)

############################################################################
cat solidus_frontend-2.0.0/app/controllers/spree/store_controller.rb 
module Spree
  class StoreController < Spree::BaseController
    include Spree::Core::ControllerHelpers::Pricing
    include Spree::Core::ControllerHelpers::Order

    skip_before_action :set_current_order, only: :cart_link

    def unauthorized
      render 'spree/shared/unauthorized', layout: Spree::Config[:layout], status: 401
    end

    def cart_link
      render partial: 'spree/shared/link_to_cart'
      fresh_when(simple_current_order, template: 'spree/shared/_link_to_cart')
    end

    private

    # This method is placed here so that the CheckoutController
    # and OrdersController can both reference it (or any other controller
    # which needs it)
    def apply_coupon_code
      if params[:order] && params[:order][:coupon_code]
        @order.coupon_code = params[:order][:coupon_code]

        handler = PromotionHandler::Coupon.new(@order).apply

        if handler.error.present?
          flash.now[:error] = handler.error
          respond_with(@order) { |format| format.html { render :edit } } && return
        elsif handler.success
          flash[:success] = handler.success
        end
      end
    end

    def config_locale
      Spree::Frontend::Config[:locale]
    end

    def lock_order
      OrderMutex.with_lock!(@order) { yield }
    rescue Spree::OrderMutex::LockFailed
      flash[:error] = Spree.t(:order_mutex_error)
      redirect_to spree.cart_path
    end
  end
end
##############################################################

cat ../solidus_core-2.0.0/app/controllers/spree/base_controller.rb 
require 'cancan'
require_dependency 'spree/core/controller_helpers/strong_parameters'
---
/rails/myshop/vendor/bundler/ruby/2.3.0/gems/solidus_core-2.0.0/lib/spree/core/controller_helpers/strong_parameters.rb
---

class Spree::BaseController < ApplicationController
  include Spree::Core::ControllerHelpers::Auth
  include Spree::Core::ControllerHelpers::RespondWith
  include Spree::Core::ControllerHelpers::Common
  include Spree::Core::ControllerHelpers::PaymentParameters
  include Spree::Core::ControllerHelpers::Search
  include Spree::Core::ControllerHelpers::Store
  include Spree::Core::ControllerHelpers::StrongParameters

  respond_to :html
end
#######################################################
----
cat /rails/myshop/vendor/bundler/ruby/2.3.0/gems/solidus_core-2.0.0/lib/spree/core/controller_helpers/strong_parameters.rb
module Spree
  module Core
    module ControllerHelpers
      module StrongParameters
        def permitted_attributes
          Spree::PermittedAttributes
        end

        delegate(*Spree::PermittedAttributes::ATTRIBUTES,
                 to: :permitted_attributes,
                 prefix: :permitted)

        def permitted_credit_card_update_attributes
          permitted_attributes.credit_card_update_attributes + [
            address_attributes: permitted_address_attributes
          ]
        end

        def permitted_payment_attributes
          permitted_attributes.payment_attributes + [
            source_attributes: permitted_source_attributes
          ]
        end

        def permitted_source_attributes
          permitted_attributes.source_attributes + [
            address_attributes: permitted_address_attributes
          ]
        end

        def permitted_checkout_attributes
          permitted_attributes.checkout_attributes + [
            bill_address_attributes: permitted_address_attributes,
            ship_address_attributes: permitted_address_attributes,
            payments_attributes: permitted_payment_attributes,
            shipments_attributes: permitted_shipment_attributes
          ]
        end

        def permitted_order_attributes
          permitted_checkout_attributes + [
            line_items_attributes: permitted_line_item_attributes
          ]
        end

        def permitted_product_attributes
          permitted_attributes.product_attributes + [
            product_properties_attributes: permitted_product_properties_attributes
          ]
        end

        def permitted_user_attributes
          permitted_attributes.user_attributes + [
            bill_address_attributes: permitted_address_attributes,
            ship_address_attributes: permitted_address_attributes
          ]
        end
      end
    end
  end
end
----
cat lib/spree/core.rb 
require 'rails/all'
require 'active_merchant'
require 'acts_as_list'
require 'awesome_nested_set'
require 'cancan'
require 'friendly_id'
require 'kaminari'
require 'mail'
require 'monetize'
require 'paperclip'
require 'paranoia'
require 'premailer/rails'
require 'ransack'
require 'state_machines-activerecord'
require 'responders'

# This is required because ActiveModel::Validations#invalid? conflicts with the
# invalid state of a Payment. In the future this should be removed.
StateMachines::Machine.ignore_method_conflicts = true

module Spree
  mattr_accessor :user_class

  def self.user_class
    if @@user_class.is_a?(Class)
      raise "Spree.user_class MUST be a String or Symbol object, not a Class object."
    elsif @@user_class.is_a?(String) || @@user_class.is_a?(Symbol)
      @@user_class.to_s.constantize
    end
  end

  # Used to configure Spree.
  #
  # Example:
  #
  #   Spree.config do |config|
  #     config.track_inventory_levels = false
  #   end
  #
  # This method is defined within the core gem on purpose.
  # Some people may only wish to use the Core part of Spree.
  def self.config(&_block)
    yield(Spree::Config)
  end

  module Core
    autoload :ProductFilters, "spree/core/product_filters"

    def self.const_missing(name)
      case name
      when :AdjustmentSource, :CalculatedAdjustments, :UserAddress, :UserPaymentSource
        Spree::Deprecation.warn("Spree::Core::#{name} is deprecated! Use Spree::#{name} instead.", caller)
        Spree.const_get(name)
      else
        super
      end
    end

    class GatewayError < RuntimeError; end
    class DestroyWithOrdersError < StandardError; end
  end
end

require 'spree/core/version'

require 'spree/core/class_constantizer'
require 'spree/core/environment_extension'
require 'spree/core/environment/calculators'
require 'spree/core/environment'
require 'spree/promo/environment'
require 'spree/migrations'
require 'spree/migration_helpers'
require 'spree/core/engine'

require 'spree/i18n'
require 'spree/localized_number'
require 'spree/money'
require 'spree/permitted_attributes'

require 'spree/core/delegate_belongs_to'
require 'spree/core/importer'
require 'spree/core/permalinks'
require 'spree/core/product_duplicator'
require 'spree/core/current_store'
require 'spree/core/controller_helpers/auth'
require 'spree/core/controller_helpers/common'
require 'spree/core/controller_helpers/order'
require 'spree/core/controller_helpers/payment_parameters'
require 'spree/core/controller_helpers/pricing'
require 'spree/core/controller_helpers/respond_with'
require 'spree/core/controller_helpers/search'
require 'spree/core/controller_helpers/store'
require 'spree/core/controller_helpers/strong_parameters'
require 'spree/core/unreturned_item_charger'
require 'spree/core/role_configuration'
require 'spree/core/stock_configuration'
require 'spree/permission_sets'
require 'spree/deprecation'

require 'spree/mailer_previews/order_preview'
require 'spree/mailer_previews/carton_preview'
require 'spree/mailer_previews/reimbursement_preview'

require 'spree/core/price_migrator'
----
